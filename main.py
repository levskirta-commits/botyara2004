import asyncio
import logging
import sqlite3
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

logging.basicConfig(level=logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7990184193:AAFNGY0LhBz8Cb7bmH8BukCFSnlTFNC4OPE"
ADMIN_ID = 620224188

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    """
    )
    cur.execute(
        """
        CREATE TABLE IF NOT EXISTS favorites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    """
    )
    conn.commit()
    conn.close()

def add_user(user):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        """
        INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
        VALUES (?, ?, ?, ?)
    """,
        (user.id, user.username, user.first_name, user.last_name),
    )
    conn.commit()
    conn.close()

def is_favorite_exists(user_id, title):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        "SELECT 1 FROM favorites WHERE user_id = ? AND title = ?", (user_id, title)
    )
    exists = cur.fetchone() is not None
    conn.close()
    return exists

def add_favorite(user_id, title):
    if not is_favorite_exists(user_id, title):
        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute(
            """
            INSERT INTO favorites (user_id, title)
            VALUES (?, ?)
        """,
            (user_id, title),
        )
        conn.commit()
        conn.close()
        return True
    return False

def clear_favorites(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM favorites WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_favorites(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT title FROM favorites WHERE user_id = ?", (user_id,))
    favorites = cur.fetchall()
    conn.close()
    return [favorite[0] for favorite in favorites]

def get_user_info(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cur.fetchone()
    conn.close()
    return user

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üé¨ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"),
            KeyboardButton(text="üì∫ –°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª"),
        ],
        [
            KeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
            KeyboardButton(text="‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        ],
    ],
    resize_keyboard=True,
)

# === –ó–∞–≥–ª—É—à–∫–∏ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ ===
FILMS = ["–ù–∞—á–∞–ª–æ", "–¢–∏—Ç–∞–Ω–∏–∫", "–ú–∞—Ç—Ä–∏—Ü–∞", "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä", "–î–∂–æ–∫–µ—Ä"]
SERIALS = [
    "–ò–≥—Ä–∞ –ø—Ä–µ—Å—Ç–æ–ª–æ–≤",
    "–û—á–µ–Ω—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –¥–µ–ª–∞",
    "–í–æ –≤—Å–µ —Ç—è–∂–∫–∏–µ",
    "–®–µ—Ä–ª–æ–∫",
    "–ë—É–º–∞–∂–Ω—ã–π –¥–æ–º",
]

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    add_user(message.from_user)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb,
    )

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    user = get_user_info(message.from_user.id)
    if user:
        user_id, username, first_name, last_name = user
        await message.answer(
            f"üßæ –¢–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {first_name}\n"
            f"üè∑Ô∏è –õ–æ–≥–∏–Ω: @{username if username else '‚Äî'}\n"
            f"üë• –§–∞–º–∏–ª–∏—è: {last_name if last_name else '‚Äî'}"
        )
    else:
        await message.answer("üòï –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª!")

@dp.message(Command("all_users"))
async def cmd_all_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, username, first_name, last_name FROM users")
    users = cur.fetchall()
    conn.close()

    if not users:
        await message.answer("–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    for user_id, username, first_name, last_name in users:
        favorites = get_favorites(user_id)
        favorites_str = "\n‚Ä¢ ".join(favorites) if favorites else "‚Äî"
        response = (
            f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
            f"üÜî {user_id} | üë§ {first_name} {last_name if last_name else ''} | üè∑Ô∏è @{username if username else '‚Äî'}\n"
            f"üíñ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:\n‚Ä¢ {favorites_str}"
        )
        await message.answer(response)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def text_handler(message: types.Message):
    text = message.text.lower()

    if text == "üé¨ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º":
        film = random.choice(FILMS)
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                        callback_data=f"add_favorite_{film}",
                    )
                ]
            ]
        )
        await message.answer(
            f"üé¨ –†–µ–∫–æ–º–µ–Ω–¥—É—é —Ñ–∏–ª—å–º: *{film}*",
            parse_mode="Markdown",
            reply_markup=inline_kb,
        )

    elif text == "üì∫ —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª":
        serial = random.choice(SERIALS)
        inline_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                        callback_data=f"add_favorite_{serial}",
                    )
                ]
            ]
        )
        await message.answer(
            f"üì∫ –†–µ–∫–æ–º–µ–Ω–¥—É—é —Å–µ—Ä–∏–∞–ª: *{serial}*",
            parse_mode="Markdown",
            reply_markup=inline_kb,
        )

    elif text == "‚ù§Ô∏è –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favorites = get_favorites(message.from_user.id)
        if favorites:
            favorites_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                            callback_data="clear_favorites",
                        )
                    ]
                ]
            )
            await message.answer(
                f"üíñ –¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n‚Ä¢ " + "\n‚Ä¢ ".join(favorites),
                reply_markup=favorites_kb,
            )
        else:
            await message.answer("–¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ üò¢")

    elif text == "‚ÑπÔ∏è –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await cmd_info(message)

    else:
        await message.answer(
            "–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª üòÖ\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É: —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å."
        )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ===
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data.startswith("add_favorite_"):
        title = callback.data.replace("add_favorite_", "")
        if add_favorite(callback.from_user.id, title):
            await callback.answer(f"‚úÖ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            await callback.answer(f"‚ö†Ô∏è '{title}' —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
        await callback.message.edit_reply_markup(reply_markup=None)

    elif callback.data == "clear_favorites":
        clear_favorites(callback.from_user.id)
        await callback.answer("üóëÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ!")
        await callback.message.edit_text("–¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ üò¢")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
