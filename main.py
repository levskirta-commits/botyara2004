import asyncio
import logging
import sqlite3
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

logging.basicConfig(level=logging.INFO)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "7990184193:AAFNGY0LhBz8Cb7bmH8BukCFSnlTFNC4OPE"
ADMIN_ID = 620224188  # –¢–≤–æ–π Telegram ID

# === –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ===
def init_db():
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS favorites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            title TEXT,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS films (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            review TEXT,
            url TEXT
        )
    """)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS serials (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT,
            review TEXT,
            url TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_user(user):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute(
        "INSERT OR IGNORE INTO users (user_id, username, first_name, last_name) VALUES (?, ?, ?, ?)",
        (user.id, user.username, user.first_name, user.last_name),
    )
    conn.commit()
    conn.close()

def is_favorite_exists(user_id, title):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM favorites WHERE user_id = ? AND title = ?", (user_id, title))
    exists = cur.fetchone() is not None
    conn.close()
    return exists

def add_favorite(user_id, title):
    if not is_favorite_exists(user_id, title):
        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute("INSERT INTO favorites (user_id, title) VALUES (?, ?)", (user_id, title))
        conn.commit()
        conn.close()
        return True
    return False

def clear_favorites(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM favorites WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_favorites(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT title FROM favorites WHERE user_id = ?", (user_id,))
    favorites = cur.fetchall()
    conn.close()
    return [favorite[0] for favorite in favorites]

def get_user_info(user_id):
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cur.fetchone()
    conn.close()
    return user

# === FSM (—Å–æ—Å—Ç–æ—è–Ω–∏—è) ===
class AddContent(StatesGroup):
    film = State()
    serial = State()
    delete_film = State()
    delete_serial = State()

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ===
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üé¨ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"),
            KeyboardButton(text="üì∫ –°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª"),
        ],
        [
            KeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
            KeyboardButton(text="‚ÑπÔ∏è –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        ],
    ],
    resize_keyboard=True,
)

# === –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===
@dp.message(Command("add_film"))
async def cmd_add_film(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await message.answer("üìΩ –í–≤–µ–¥–∏—Ç–µ —Ñ–∏–ª—å–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –ö—Ä–∞—Ç–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è | –°—Å—ã–ª–∫–∞")
    await state.set_state(AddContent.film)

@dp.message(AddContent.film)
async def process_add_film(message: types.Message, state: FSMContext):
    parts = message.text.split("|")
    if len(parts) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –ù–∞–∑–≤–∞–Ω–∏–µ | –†–µ—Ü–µ–Ω–∑–∏—è | –°—Å—ã–ª–∫–∞")
        return
    title, review, url = [p.strip() for p in parts]
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO films (title, review, url) VALUES (?, ?, ?)", (title, review, url))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –§–∏–ª—å–º *{title}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")
    await state.clear()

@dp.message(Command("add_serial"))
async def cmd_add_serial(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await message.answer("üì∫ –í–≤–µ–¥–∏—Ç–µ —Å–µ—Ä–∏–∞–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –ö—Ä–∞—Ç–∫–∞—è —Ä–µ—Ü–µ–Ω–∑–∏—è | –°—Å—ã–ª–∫–∞")
    await state.set_state(AddContent.serial)

@dp.message(AddContent.serial)
async def process_add_serial(message: types.Message, state: FSMContext):
    parts = message.text.split("|")
    if len(parts) != 3:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: –ù–∞–∑–≤–∞–Ω–∏–µ | –†–µ—Ü–µ–Ω–∑–∏—è | –°—Å—ã–ª–∫–∞")
        return
    title, review, url = [p.strip() for p in parts]
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("INSERT INTO serials (title, review, url) VALUES (?, ?, ?)", (title, review, url))
    conn.commit()
    conn.close()
    await message.answer(f"‚úÖ –°–µ—Ä–∏–∞–ª *{title}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode="Markdown")
    await state.clear()

# === –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ===
@dp.message(Command("delete_film"))
async def cmd_delete_film(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤.")
        return
    await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(AddContent.delete_film)

@dp.message(AddContent.delete_film)
async def process_delete_film(message: types.Message, state: FSMContext):
    title = message.text.strip()
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM films WHERE title = ?", (title,))
    deleted = cur.rowcount
    conn.commit()
    conn.close()
    if deleted > 0:
        await message.answer(f"‚úÖ –§–∏–ª—å–º '{title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    else:
        await message.answer(f"‚ö†Ô∏è –§–∏–ª—å–º '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    await state.clear()

@dp.message(Command("delete_serial"))
async def cmd_delete_serial(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤.")
        return
    await message.answer("üóë –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    await state.set_state(AddContent.delete_serial)

@dp.message(AddContent.delete_serial)
async def process_delete_serial(message: types.Message, state: FSMContext):
    title = message.text.strip()
    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("DELETE FROM serials WHERE title = ?", (title,))
    deleted = cur.rowcount
    conn.commit()
    conn.close()
    if deleted > 0:
        await message.answer(f"‚úÖ –°–µ—Ä–∏–∞–ª '{title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    else:
        await message.answer(f"‚ö†Ô∏è –°–µ—Ä–∏–∞–ª '{title}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    await state.clear()

# === –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ===
@dp.message(Command("all_users"))
async def cmd_all_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    conn = sqlite3.connect("users.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, username, first_name, last_name FROM users")
    users = cur.fetchall()
    conn.close()

    if not users:
        await message.answer("–ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    response = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user_id, username, first_name, last_name in users:
        favorites = get_favorites(user_id)
        favorites_str = "\n‚Ä¢ ".join(favorites) if favorites else "‚Äî"
        response += (
            f"üÜî {user_id} | üë§ {first_name or ''} {last_name or ''} | "
            f"üè∑Ô∏è @{username or '‚Äî'}\n"
            f"üíñ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ:\n‚Ä¢ {favorites_str}\n\n"
        )

    for i in range(0, len(response), 4000):
        await message.answer(response[i:i+4000])

# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    add_user(message.from_user)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb,
    )

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    user = get_user_info(message.from_user.id)
    if user:
        user_id, username, first_name, last_name = user
        await message.answer(
            f"üßæ –¢–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"üÜî ID: {user_id}\n"
            f"üë§ –ò–º—è: {first_name}\n"
            f"üè∑Ô∏è –õ–æ–≥–∏–Ω: @{username if username else '‚Äî'}"
        )
    else:
        await message.answer("üòï –¢–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã —è —Ç–µ–±—è –∑–∞–ø–æ–º–Ω–∏–ª!")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
@dp.message()
async def text_handler(message: types.Message):
    text = message.text.lower()
    if text == "üé¨ —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º":
        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute("SELECT title, review, url FROM films ORDER BY RANDOM() LIMIT 1")
        film = cur.fetchone()
        conn.close()
        if film:
            title, review, url = film
            inline_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{title}")],
                    [InlineKeyboardButton(text="üîó –°–º–æ—Ç—Ä–µ—Ç—å", url=url)],
                ]
            )
            await message.answer(f"üé¨ *{title}*\n\n_{review}_", parse_mode="Markdown", reply_markup=inline_kb)
        else:
            await message.answer("üò¢ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤.")
    elif text == "üì∫ —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª":
        conn = sqlite3.connect("users.db")
        cur = conn.cursor()
        cur.execute("SELECT title, review, url FROM serials ORDER BY RANDOM() LIMIT 1")
        serial = cur.fetchone()
        conn.close()
        if serial:
            title, review, url = serial
            inline_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{title}")],
                    [InlineKeyboardButton(text="üîó –°–º–æ—Ç—Ä–µ—Ç—å", url=url)],
                ]
            )
            await message.answer(f"üì∫ *{title}*\n\n_{review}_", parse_mode="Markdown", reply_markup=inline_kb)
        else:
            await message.answer("üò¢ –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–æ–≤.")
    elif text == "‚ù§Ô∏è –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favorites = get_favorites(message.from_user.id)
        if favorites:
            favorites_kb = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="clear_favorites")]
                ]
            )
            await message.answer(f"üíñ –¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n‚Ä¢ " + "\n‚Ä¢ ".join(favorites), reply_markup=favorites_kb)
        else:
            await message.answer("–¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ üò¢")
    elif text == "‚ÑπÔ∏è –º–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await cmd_info(message)
    else:
        await message.answer("–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª üòÖ\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É: —Ñ–∏–ª—å–º, —Å–µ—Ä–∏–∞–ª, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å.")

# === Callback ===
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    if callback.data.startswith("add_favorite_"):
        title = callback.data.replace("add_favorite_", "")
        if add_favorite(callback.from_user.id, title):
            await callback.answer(f"‚úÖ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            await callback.answer(f"‚ö†Ô∏è '{title}' —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
        await callback.message.edit_reply_markup(reply_markup=None)
    elif callback.data == "clear_favorites":
        clear_favorites(callback.from_user.id)
        await callback.answer("üóëÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ!")
        await callback.message.edit_text("–¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø—É—Å—Ç–æ üò¢")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    init_db()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω..")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())